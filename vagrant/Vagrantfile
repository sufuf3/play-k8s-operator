# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.

Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "localgod/centos"
  config.vm.box_version = "7.6.1810"
  config.vm.hostname = 'kubednn-dev'
  config.vm.define vm_name = 'kubednn'

  development_env = ENV.fetch('DEV', true)

$kubednn_env = <<SHELL
# Ref: https://kubernetes.io/docs/setup/independent/install-kubeadm/

set -e -x -u
echo "=== [Install kubednn Server Environment] ==="

echo "=== Disable selinux ==="
#sudo setenforce 0
sudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config
#sudo sed -i --follow-symlinks 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/sysconfig/selinux
sudo systemctl stop firewalld && sudo systemctl disable firewalld

echo "=== Enable iptable kernel parameter ==="
cat << EOF | sudo tee -a /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
sudo sysctl --system

mkdir ~/dnnsetup/
mv ~/kubernetes-dashboard.yaml ~/dnnsetup/
mv ~/kubeadm.yaml ~/dnnsetup/
#sudo yum check-update >> /tmp/check-update-1.log
sudo yum -y install git nfs-common ntp jq httpie vim cmake tcpdump unzip tig socat traceroute curl
sudo yum -y install clang doxygen hugepages build-essential libnuma-dev libpcap-dev linux-headers-`uname -r` dh-autoreconf libssl-dev libcap-ng-dev openssl python python-pip htop bridge-utils

# Install Docker
# kubernetes official max validated version: v18.06 https://github.com/kubernetes-sigs/kubespray#supported-components
echo "=== Install Docker ==="
sudo yum install -y yum-utils device-mapper-persistent-data lvm2
sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
sudo rpm --import https://download.docker.com/linux/centos/gpg
#sudo yum check-update >> /tmp/check-update-2.log
sudo yum -y install http://vault.centos.org/centos/7.3.1611/extras/x86_64/Packages/container-selinux-2.9-4.el7.noarch.rpm
sudo yum -y install docker-ce-18.06.1.ce-3.el7
# Manage Docker as a non-root user
sudo usermod -aG docker $USER
sudo systemctl enable docker.service
sudo systemctl start docker.service

echo "=== Load br_netfilter ==="
sudo modprobe br_netfilter

# Disable swap
sudo swapoff -a && sudo sysctl -w vm.swappiness=0
sudo sed '/swap.img/d' -i /etc/fstab

# Install Kubernetes
echo "=== Install Kubernetes ==="
export KUBE_VERSION="1.12.4"
export NET_IF_NAME="enp0s8"
cat << EOF | sudo tee -a /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
exclude=kube*
EOF
sudo yum-config-manager --add-repo https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
sudo yum install -y kubelet-${KUBE_VERSION}-0 kubeadm-${KUBE_VERSION}-0 kubectl --disableexcludes=kubernetes
sudo systemctl enable --now kubelet

sudo kubeadm init --config ~/dnnsetup/kubeadm.yaml
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# Should give calico the real network interface name
kubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/rbac-kdd.yaml
kubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml
kubectl taint nodes --all node-role.kubernetes.io/master-

# Install helm
curl -L https://storage.googleapis.com/kubernetes-helm/helm-v2.12.3-linux-amd64.tar.gz > helm-v2.12.3-linux-amd64.tar.gz && tar -zxvf helm-v2.12.3-linux-amd64.tar.gz && chmod +x linux-amd64/helm && sudo mv linux-amd64/helm /usr/local/bin/helm
rm -rf /home/$USER/helm-v2.12.3-linux-amd64.tar.gz
sudo pip install yq
helm init
kubectl create serviceaccount --namespace kube-system tiller
kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller
kubectl patch deploy --namespace kube-system tiller-deploy -p '{"spec":{"template":{"spec":{"serviceAccount":"tiller"}}}}'

# Install Kubernetes dashboard
kubectl create -f ~/dnnsetup/kubernetes-dashboard.yaml
kubectl -n kube-system create sa dashboard
kubectl create clusterrolebinding dashboard --clusterrole cluster-admin --serviceaccount=kube-system:dashboard

# Let anonymous access API server
kubectl create clusterrolebinding anonymous-become-admin --clusterrole=cluster-admin --user=system:anonymous

# Install NFS Server
sudo yum -y install nfs-utils
sudo systemctl enable nfs-server.service
sudo systemctl start nfs-server.service
sudo mkdir /nfsshare
sudo mkdir /nfsshare/mongodb
sudo mkdir /nfsshare/user
echo "/nfsshare *(rw,sync,no_root_squash)" | sudo tee /etc/exports
sudo exportfs -r
sudo showmount -e
SHELL

# Install development toolkit
$kubednn_dev_toolkits = <<SHELL
set -e -x -u
echo "=== Install Development Toolkit ==="

# vim 8 ppa
#sudo yum check-update >> /tmp/check-update-2.log
sudo yum -y install vim cmake tcpdump unzip tig wget

# YouCompleteMe requirement
sudo yum -y install python-devel python3-devel

# Install Golang
wget --quiet https://storage.googleapis.com/golang/go1.10.2.linux-amd64.tar.gz
sudo tar -zxf go1.10.2.linux-amd64.tar.gz -C /usr/local/
echo 'export GOROOT=/usr/local/go' >>  /home/$USER/.bashrc
echo 'export GOPATH=$HOME/go' >> /home/$USER/.bashrc
echo 'export PATH=/home/$USER/protoc/bin:$PATH:$GOROOT/bin:$GOPATH/bin' >> /home/$USER/.bashrc
export GOROOT=/usr/local/go
export GOPATH=$HOME/go
export PATH=/home/$USER/protoc/bin:$PATH:$GOROOT/bin:$GOPATH/bin

# setup golang dir
mkdir -p /home/$USER/go/src
rm -rf /home/$USER/go1.10.2.linux-amd64.tar.gz

# Install protoc
# Env for proto
PROTOC_RELEASE="https://github.com/google/protobuf/releases/download/v3.5.1/protoc-3.5.1-linux-x86_64.zip"
PROTOC_TARGET="${HOME}/protoc"
if [ ! -d "${PROTOC_TARGET}" ]; then curl -fsSL "$PROTOC_RELEASE" > "${PROTOC_TARGET}.zip"; fi
if [ -f "${PROTOC_TARGET}.zip" ]; then unzip "${PROTOC_TARGET}.zip" -d "${PROTOC_TARGET}"; fi
go get -u github.com/golang/protobuf/{proto,protoc-gen-go}
rm -rf /home/$USER/protoc.zip
# Install govendor package manager
go get -u github.com/kardianos/govendor
SHELL

  # In order to simulate multiple interfaces
  # enp0s8
  config.vm.network :private_network, ip: "172.17.8.100"
  # enp0s9
  config.vm.network :private_network, ip: "172.17.8.50"
  # enp0s10
  config.vm.network :private_network, ip: "172.17.8.60"
  # enp0s16
  config.vm.network :private_network, ip: "172.17.8.70"

  # For K8s dashboard
  config.vm.network "forwarded_port", guest: 32641, host: 32641
  # For K8s API
  config.vm.network "forwarded_port", guest: 6443, host: 6443

  if development_env == true
    config.vm.provision "file", source: "kubeadm.yaml", destination: "$HOME/kubeadm.yaml"
    config.vm.provision "file", source: "kubernetes-dashboard.yaml", destination: "$HOME/kubernetes-dashboard.yaml"
    config.vm.provision "shell", privileged: false, inline: $kubednn_env
    config.vm.provision "shell", privileged: false, inline: $kubednn_dev_toolkits
  else
    config.vm.provision "shell", privileged: false, inline: $kubednn_env
  end

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  
  config.vm.provider :virtualbox do |v|
      v.customize ["modifyvm", :id, "--cpus", 2]
      v.customize ["modifyvm", :id, "--memory", 3072]
      v.customize ['modifyvm', :id, '--nicpromisc2', 'allow-all']
      v.customize ["setextradata", :id, "VBoxInternal/CPUM/SSE4.1", "1"]
      v.customize ["setextradata", :id, "VBoxInternal/CPUM/SSE4.2", "1"]
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
